%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2395 1410
%%HiResBoundingBox: 0 0 2394.96 1410
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394.96 1410 re
W
q
[0.24 0 0 -0.24 0 1410] cm
q
0 0 9979.167 5870.6494 re
W*
q
[37.171028 0 0 37.15834 3143.699 76.742348] cm
/DeviceRGB {} CS
[0.3686 0.3882 0.7137] SC
/DeviceRGB {} cs
[0.3686 0.3882 0.7137] sc
13.864 46.238998 m
13.864 46.238998 25.357 24.450998 50.014999 24.450998 c
74.671997 24.450998 86.136002 46.238998 86.136002 46.238998 c
86.136002 46.238998 66.449005 36.217999 61.078003 43.925999 c
60.617004 44.592999 72.518005 59.290001 68.751999 93.879997 c
66.978996 80.003998 52.813 58.550999 49.999001 58.550999 c
47.187 58.550999 33.02 80.019997 31.248001 93.931 c
27.456001 59.167999 40.000999 47.005001 38.477001 43.903999 c
35.398998 37.655998 13.864 46.238998 13.864 46.238998 c
h
f
59.174 14.865 m
59.174 19.722 55.237999 23.661999 50.298 23.661999 c
45.442001 23.661999 41.502998 19.721998 41.502998 14.864999 c
41.502998 10.010999 45.440998 6.069999 50.297997 6.069999 c
55.237999 6.07 59.174 10.011 59.174 14.865 c
h
f
Q
q
[45.46125 0 0 45.445728 229.29311 3721.4414] cm
/DeviceRGB {} CS
[0.3686 0.3882 0.7137] SC
/DeviceRGB {} cs
[0.3686 0.3882 0.7137] sc
2 40 m
1.68 40 1.44 38.68 1.76 38.639999 c
3.8 38.360001 5.08 37.559998 5.08 35.040001 c
5.08 16.960001 l
5.08 14.440001 3.8 13.640001 1.76 13.360001 c
1.44 13.320001 1.68 12.000001 2 12.000001 c
12.96 12.000001 l
13.28 12.000001 13.520001 13.320001 13.2 13.360001 c
11.48 13.6 9.88 14.160001 9.88 16.960001 c
9.88 35.040001 l
9.88 37.84 11.480001 38.400002 13.2 38.639999 c
13.52 38.68 13.28 40 12.96 40 c
2 40 l
h
17.517 40 m
17.197001 40 16.917 38.84 17.237 38.799999 c
18.437 38.639999 19.997 38.079998 19.997 35.759998 c
19.997 26.159998 l
19.997 24.239998 18.957001 23.799997 17.277 23.599998 c
16.957001 23.559998 17.117001 22.519999 17.437 22.439999 c
23.757 20.679998 l
24.237 20.559998 24.437 20.879999 24.437 21.279999 c
24.437 22.4 24.757 22.799999 25.396999 22.559999 c
27.356998 21.84 29.237 20.68 31.636999 20.68 c
35.556999 20.68 36.917 23.68 36.917 26.280001 c
36.917 35.760002 l
36.917 38.080002 38.477001 38.640003 39.676998 38.800003 c
39.996998 38.840004 39.716999 40.000004 39.436996 40.000004 c
30.516996 40.000004 l
30.236996 40.000004 30.036997 38.840004 30.276997 38.800003 c
31.796997 38.560001 32.636997 37.880005 32.636997 35.760002 c
32.636997 28.080002 l
32.636997 24.720001 30.996998 23.960003 28.436996 23.960003 c
26.716997 23.960003 24.276997 24.440002 24.276997 25.480003 c
24.276997 35.760002 l
24.276997 37.880001 25.356997 38.600002 26.836996 38.800003 c
27.116997 38.840004 26.876997 40.000004 26.556995 40.000004 c
17.516994 40.000004 l
17.517 40 l
h
50.194 40.639999 m
46.953999 40.639999 43.554001 39.32 43.993999 38.119999 c
44.633999 36.439999 l
45.553997 34 47.194 38.199997 51.674 38.199997 c
55.554001 38.199997 56.074001 35.639996 52.993999 34.079998 c
47.753998 31.439999 l
41.633999 28.359999 43.673996 20.679998 51.513996 20.679998 c
54.473995 20.679998 57.513996 21.879999 57.033997 23.039999 c
56.353996 24.719999 l
55.393997 27.119999 53.873997 23.16 49.913998 23.16 c
46.873997 23.16 46.313999 25.719999 49.113998 27.119999 c
54.553997 29.879999 l
60.953999 33.119999 58.793999 40.639999 50.193996 40.639999 c
50.194 40.639999 l
h
68.070999 40.639999 m
65.310997 40.639999 62.591 39 62.591 35.759998 c
62.591 33.599998 63.870998 32.439999 66.750999 31.519999 c
72.591003 29.639999 l
73.791 29.24 74.151001 29.199999 74.151001 28.199999 c
74.151001 26.599998 l
74.151001 24.119999 72.911003 23.839998 71.350998 23.839998 c
69.230995 23.839998 66.710999 24.399998 65.230995 24.559998 c
64.870995 24.599998 64.630997 24.399998 64.590996 24.119997 c
64.510994 23.399998 l
64.390991 22.359997 70.470993 20.679998 73.510994 20.679998 c
78.150993 20.679998 78.470993 24.359999 78.470993 27.199999 c
78.470993 35.639999 l
78.470993 39 81.35099 37.639999 81.910995 38 c
82.110992 38.119999 82.190994 38.400002 82.190994 38.560001 c
82.190994 39.400002 78.790993 40.639999 77.110992 40.639999 c
75.830994 40.639999 75.030991 39.919998 74.070992 37.880001 c
70.270988 40.200001 69.430992 40.639999 68.070992 40.639999 c
68.070999 40.639999 l
h
69.990997 37.68 m
72.030998 37.68 74.190994 36.240002 74.190994 34.200001 c
74.190994 31.080002 l
73.950996 31.240002 73.990997 31.280003 73.230995 31.520002 c
69.190994 32.880001 l
67.910995 33.32 67.270996 34 67.270996 35.200001 c
67.270996 36.720001 68.310997 37.68 69.990997 37.68 c
h
85.348 40 m
85.028 40 84.748001 38.84 85.068001 38.799999 c
86.267998 38.639999 87.828003 38.079998 87.828003 35.759998 c
87.828003 26.159998 l
87.828003 24.239998 86.788002 23.799997 85.108002 23.599998 c
84.788002 23.559998 84.947998 22.519999 85.268005 22.439999 c
91.588005 20.679998 l
92.068008 20.559998 92.268005 20.879999 92.268005 21.279999 c
92.268005 22.4 92.588005 22.799999 93.228004 22.559999 c
95.188004 21.84 97.068008 20.68 99.468002 20.68 c
103.388 20.68 104.748001 23.68 104.748001 26.280001 c
104.748001 35.760002 l
104.748001 38.080002 106.307999 38.640003 107.508003 38.800003 c
107.828003 38.840004 107.548004 40.000004 107.268005 40.000004 c
98.348007 40.000004 l
98.068008 40.000004 97.868004 38.840004 98.108009 38.800003 c
99.628006 38.560001 100.46801 37.880005 100.46801 35.760002 c
100.46801 28.080002 l
100.46801 24.720001 98.828011 23.960003 96.268013 23.960003 c
94.548012 23.960003 92.108017 24.440002 92.108017 25.480003 c
92.108017 35.760002 l
92.108017 37.880001 93.188019 38.600002 94.668015 38.800003 c
94.948013 38.840004 94.708015 40.000004 94.388016 40.000004 c
85.348015 40.000004 l
85.348 40 l
h
111.184998 40.080002 m
110.784996 40.120003 110.625 38.720001 110.945 38.640003 c
113.264999 38.040005 115.065002 37.680004 115.065002 34.720001 c
115.065002 16.960001 l
115.065002 14.400002 113.425003 13.720001 111.705002 13.280001 c
111.385002 13.200001 111.584999 11.880001 111.904999 11.920001 c
114.824997 12.240001 119.864998 12.160001 122.305 12.160001 c
125.945 12.160001 128.585007 12.000001 131.865005 11.920001 c
132.825012 11.920001 132.825012 12.560001 132.625 13.480001 c
131.664993 17.280001 l
131.544998 17.84 130.544998 17.84 130.384995 17.280001 c
129.784988 15.320001 128.584991 14.200001 123.584991 14.200001 c
120.784988 14.200001 119.86499 14.920001 119.86499 17 c
119.86499 23.92 l
119.86499 24.959999 120.384987 25.16 121.18499 25.16 c
122.064987 25.16 l
125.304985 25.16 128.10498 24.84 129.74498 23.360001 c
130.144974 23 131.024979 23.08 130.664978 23.880001 c
128.384979 28.920002 l
128.064972 29.640001 127.464981 29.560001 127.024979 28.960003 c
126.10498 27.680002 124.06498 27.160004 121.74498 27.160004 c
121.184982 27.160004 l
120.384979 27.160004 119.864983 27.360004 119.864983 28.400003 c
119.864983 34.720005 l
119.864983 37.680004 121.704979 37.920006 124.984985 38.640007 c
125.344986 38.720009 125.144989 40.120007 124.744987 40.080006 c
121.86499 39.880005 119.784988 39.840004 117.464989 39.840004 c
115.144989 39.840004 113.064987 39.880005 111.18499 40.080006 c
111.184998 40.080002 l
h
146.981995 40.639999 m
141.421997 40.639999 137.261993 36.639999 137.261993 30.84 c
137.261993 25.200001 141.261993 20.68 147.141998 20.68 c
152.701996 20.68 156.862 24.68 156.862 30.48 c
156.862 36.119999 152.901993 40.639999 146.981995 40.639999 c
h
148.141998 38.240002 m
150.102005 38.240002 152.501999 37.040001 152.501999 32.440002 c
152.501999 27.200003 149.662003 23.080002 145.942001 23.080002 c
144.022003 23.080002 141.621994 24.280003 141.621994 28.840002 c
141.621994 34.120003 144.46199 38.240002 148.141998 38.240002 c
h
161.218994 40 m
160.898987 40 160.618988 38.84 160.938995 38.799999 c
162.138992 38.639999 163.658997 38.079998 163.658997 35.759998 c
163.658997 18.159998 l
163.658997 13.759998 163.05899 12.919998 160.578995 12.639998 c
160.258987 12.599998 160.378998 11.559998 160.658997 11.519998 c
168.099 9.919997 l
168.459 9.839997 168.77899 10.119997 168.659 10.639998 c
168.379 11.919997 167.939 14.479998 167.939 19.759998 c
167.939 35.759998 l
167.939 38.079998 169.459 38.639999 170.69899 38.799999 c
170.97899 38.84 170.73898 40 170.41899 40 c
161.218994 40 l
h
178.936 16.92 m
178.056 16.92 175.89601 15.04 175.89601 13.88 c
175.89601 12.72 178.05602 10.84 178.936 10.84 c
179.81599 10.84 181.976 12.72 181.976 13.88 c
181.976 15.04 179.81599 16.92 178.936 16.92 c
h
174.576 40 m
174.256 40 173.976 38.84 174.29601 38.799999 c
175.53601 38.639999 177.09601 38.079998 177.09601 35.759998 c
177.09601 26.919998 l
177.09601 24.479998 176.45601 23.879997 174.37601 23.599998 c
174.056 23.559998 174.17601 22.519999 174.45601 22.439999 c
181.53601 20.759998 l
181.936 20.679998 182.13602 20.959999 182.01601 21.479998 c
181.73601 22.759998 181.37601 25.119997 181.37601 27.719997 c
181.37601 35.759998 l
181.37601 38.079998 182.936 38.639999 184.17601 38.799999 c
184.45601 38.84 184.216 40 183.89601 40 c
174.57602 40 l
174.576 40 l
h
197.933 40.639999 m
192.373 40.639999 188.213 36.639999 188.213 30.84 c
188.213 25.200001 192.213 20.68 198.093 20.68 c
203.653 20.68 207.813 24.68 207.813 30.48 c
207.813 36.119999 203.853 40.639999 197.933 40.639999 c
h
199.093 38.240002 m
201.05301 38.240002 203.453 37.040001 203.453 32.440002 c
203.453 27.200003 200.61301 23.080002 196.89301 23.080002 c
194.97301 23.080002 192.573 24.280003 192.573 28.840002 c
192.573 34.120003 195.41299 38.240002 199.093 38.240002 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
