# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!
#input AMPLIFY { globalAuthRule: AuthRule = { allow: private } } # Adjust for production

type User @model @auth(rules: [{ allow: owner }]) {

  id: ID!
  firstName: String!
  username: String!
  portfolio: [Portfolio] @hasMany
  research: [Research] @hasMany
  charity: [Charity] @hasMany
  restaurant: [Restaurant] @hasMany

  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])

}
 # allow unauth read when the parent type (TemplateInterface) is published
type SocialLinks @model {
  id: ID!

  github: String
  linkedin: String
  twitter: String
  instagram: String
  youtube: String
  tiktok: String
  facebook: String
}


interface TemplateInterface {
  id: ID!
  userID: ID!
  user: User
  isPublished: Boolean
  socialLinks: SocialLinks
  intro: String
  photos: [String]
  # Define other common fields here
}



### portfolio belew ###
type Portfolio implements TemplateInterface @model @auth(rules: [{ allow: public, operations: [read], provider: iam }, { allow: owner }]) {

  id: ID!
  userID: ID! 
  user: User @belongsTo(fields: ["userID"])
  isPublished: Boolean!
  socialLinks: SocialLinks @hasOne
  intro: String
  photos: [String]

  firstName: String!
  lastName: String
  resumeLink: String


  sections: [Section] @hasMany

  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])

  # Additional fields specific to the portfolio template can be added here
}

type Section @model {
  id: ID!
  name: String
  title: String
  events: [Event] @hasMany
  portfolioID: ID! 
  portfolio: Portfolio @belongsTo(fields: ["portfolioID"])
}

type Event @model {
  id: ID!
  name: String
  logo: String
  role: String
  dates: DateRange @hasOne
  bullets: [String]
  skills: [String]
  photos: [String]
  link: String
  sectionID: ID! 
  section: Section @belongsTo(fields: ["sectionID"])
}

type DateRange @model {
  id: ID!
  start: AWSDate!
  end: AWSDate
}


input UserInput { 
  id: ID!
  firstName: String
  username: String
}

input PortfolioInput {
  id: ID
  isPublished: Boolean
  socialLinks: SocialLinksInput
  intro: String
  photos: [String]
  lastName: String
  resumeLink: String
  sections: [SectionInput]
  # Add other fields specific to the portfolio template
}

input SocialLinksInput {
  id: ID
  github: String
  linkedin: String
  twitter: String
  instagram: String
  youtube: String
  tiktok: String
  facebook: String
}

input SectionInput {
  id: ID
  name: String
  title: String
  events: [EventInput]
}

input EventInput {
  id: ID
  name: String
  logo: String
  role: String
  dates: DateRangeInput
  bullets: [String]
  skills: [String]
  photos: [String]
  link: String
}

input DateRangeInput {
  start: AWSDate
  end: AWSDate
}


### portfolio up ###





### not integrated yet below ###
type Research implements TemplateInterface @model @auth(rules: [{ allow: public, operations: [read],  provider: iam }, { allow: owner }]) {
  id: ID!
  userID: ID! 
  user: User @belongsTo(fields: ["userID"])
  isPublished: Boolean
  socialLinks: SocialLinks @hasOne
  intro: String
  photos: [String]

  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])

  # Placeholder fields
}

type Charity implements TemplateInterface @model @auth(rules: [{ allow: public, operations: [read],  provider: iam}, { allow: owner }]) {
  id: ID!
  userID: ID! 
  user: User @belongsTo(fields: ["userID"])
  isPublished: Boolean
  socialLinks: SocialLinks @hasOne
  intro: String
  photos: [String]
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])

  # Placeholder fields
}

type Restaurant implements TemplateInterface@model @auth(rules: [{ allow: public, operations: [read] ,provider: iam}, { allow: owner }]) {
  id: ID!
  userID: ID! 
  user: User @belongsTo(fields: ["userID"])
  isPublished: Boolean
  socialLinks: SocialLinks @hasOne
  intro: String
  photos: [String]
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])

  # Placeholder fields
}


### not integrated yet below ###







### common types below ###
